#!/usr/bin/python3

import sys
import os
import multiprocessing 
import gnupg
import string
from itertools import chain, product

your_list = string.ascii_lowercase
gpg = gnupg.GPG(gnupghome='/home/sergio/Desktop/Practica_2_SRR')

def brute_forcing(maxrange, pass_count):
    iterator = 0
    for i in range(maxrange+1):
        for attempt in product(your_list, repeat=i):
            if len(passwords_array) < 32:
                if iterator >= pass_count:
                    passwords_array.append(''.join(attempt))
                    iterator += 1
                else:
                    iterator += 1
            else:
                return passwords_array, iterator


def decrypt_gpg(password):
    f = open('archivo.pdf.gpg', 'rb')
    status = gpg.decrypt_file(f, passphrase=password, output='my-decrypted.txt')
    print("Probando con: ", password)
    if status.ok == True:
        print("[+] Se ha descifrado el archivo. La key era: ", password)
        print('ok: ', status.ok)
        print('status: ', status.status)
        print('stderr: ', status.stderr)
        f.close()
        command = "echo " + password + " > password.txt"
        os.system(command)
        return True
    f.close()
    return False

if __name__ == "__main__":
    found = []
    isFound = False
    pass_count = 0
    while not isFound:
        print("---------------")
        passwords_array = []
        passwords_array, pass_count = brute_forcing(10, pass_count)
        print("PASSWORD_ARRAY --> ", passwords_array)
        p = multiprocessing.Pool(multiprocessing.cpu_count())
        found = p.map(decrypt_gpg, passwords_array)
        if True in found:
            isFound = True



