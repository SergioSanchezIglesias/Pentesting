#!/usr/bin/python3

#Herramienta que automatiza varias funciones de enumeracion en pentesting
#Autor: Sergio Sanchez Iglesias

import sys
import os
import subprocess

from colorama import init, Fore, Back, Style

mensaje_ayuda = """Bienvenido a la herramienta de automatizacion.
        Elige la opcion que quieras ejecutar:

        Importante!!!! Se debe de usar solo una Ip_Address.
        
        -h, --help -> Mostrar ayuda. En caso de estar presente esta opcion, solo se ejecutara esta.
        -p, --ping -> Hacer un ping a la maquina. Uso -p [Ip_address]
        -w, --whatweb -> Realizar un whatweb a la direccion que se quiera por el puerto 80 (HTTP). Uso -w [Ip_address]
        -w443, --whatweb443 -> Realizar un whatweb a la direccion que se quiera por el puerto 443 (HTTPS). Uso -w443 [Ip_address]
        -n, --nmap -> Realiazar un escaneo con nmap. Uso -m [Ip_address]

        Si se escoge la opcion -n o --nmap, hay que elegir unas subopciones.
        """

mensaje_nmap = """Elige la operacion que que quieres realizar:
        1. Escaneo de puertos.
        2. Descubrimiento de servicios en cada puerto.
        3. Escaneo y descubrimiento.
        """

def obtener_OS( response ):
    position = response.index( 'ttl=' )
    start = position+4
    end = position+7
    ttl = int(response[start : end])

    if ttl <= 64:
        print( Fore.CYAN + "OS: " + Fore.GREEN + "Linux" + Fore.RESET )
    elif ttl <= 128:
        print( Fore.CYAN + "OS: " + Fore.GREEN + "Windows" + Fore.RESET )

def realizar_ping( ip_address ):
    print( Fore.MAGENTA + "PING" + Fore.RESET)
    command = ['ping', '-c', '1', ip_address]
    response = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT )
    returncode = response.wait()

    if returncode == 0:
        print( Fore.CYAN + "Estado del host: " + Fore.GREEN + "ACTIVO" + Fore.RESET )
        respuesta = response.stdout.read().decode()
        obtener_OS( respuesta )
    else:
        print( Fore.CYAN + "Estado del host: " + Fore.RED + "DESACTIVADO" + Fore.RESET )
        sys.exit(1)
    print()

def realizar_whatweb( ip_address, mode ):
    print( Fore.MAGENTA + "WHATWEB" + Fore.RESET )
    if mode == "-w":
        command = "whatweb http://" + ip_address
    elif mode == "-w443":
        command = "whatweb https://" + ip_address
    response = os.system( command )

def port_scan( ip_address ):
    file = input( "Escribe el nombre del archivo destino: " )
    command = "sudo nmap -sS --min-rate 5000 -p- --open -vvv -n -Pn " + ip_address + " -oG " + file
    response = os.system( command )

def services_runnig( ip_address ):
    file = input( "Escribe el nombre del archivo donde se encuentran los puertos abiertos: " )
    command = "cat " + file + " | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ','"
    open_ports = subprocess.check_output( command, shell=True ).decode()
    open_ports = open_ports.replace( "\n", "" )

    command = "nmap -sCV -p" + str( open_ports ) + " " + ip_address + " -oN targeted"
    response = os.system( command )

def both_options( ip_address ):
    file = input( "Escribe el nombre del archivo destino: " )
    command = "sudo nmap -sS --min-rate 5000 -p- --open -vvv -n -Pn " + ip_address + " -oG " + file
    response = os.system( command )
    command = "cat " + file + " | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ','"
    open_ports = subprocess.check_output( command, shell=True ).decode()
    open_ports = open_ports.replace( "\n", "" )

    command = "nmap -sCV -p" + str( open_ports ) + " " + ip_address + " -oN targeted"
    response = os.system( command )

def realizar_nmap( ip_address ):
    print( Fore.MAGENTA + "NMAP" + Fore.RESET )
    print( Fore.YELLOW + mensaje_nmap + Fore.RESET )
    opcion = int( input() )
    
    if opcion == 1:
        port_scan( ip_address )
    elif opcion == 2:
        services_runnig( ip_address )
    elif opcion == 3:
        both_options( ip_address )
    else:
        print( Fore.RED + "Opcion incorrecta. Seleccione una de las dos posibles." + Fore.RESET )
        sys.exit(1)

def recoger_direccion():
    for arg in sys.argv:
        if arg != sys.argv[0]:
            if arg[0] != '-':
                sys.argv.remove(arg)
                return arg  
    print( Fore.RED + "Error, falta la direccion Ip. Consulta el manual en caso de duda." + Fore.RESET )
    sys.exit(1)

def recorrer_argumentos():
    if ( "-h" in sys.argv or "--help" in sys.argv ):
        print( Fore.YELLOW + mensaje_ayuda + Fore.RESET)
        sys.exit(0)
    else:
        ip_address = recoger_direccion()
        for arg in sys.argv:
            if arg != sys.argv[0]:
                if ( arg == "-p" or arg == "--ping" ):
                    realizar_ping( ip_address )
                elif ( arg == "-w" or arg == "--whatweb" ):
                    realizar_whatweb( ip_address, "-w" )
                elif ( arg == "-w443" or arg == "--whatweb443" ):
                    realizar_whatweb( ip_address, "-w443")
                elif ( arg == "-n" or arg == "--nmap" ):
                    realizar_nmap( ip_address )
                else:
                    print( Fore.RED + f"Opcion {arg} desconocida." + Fore.RESET )
                    

                    



def main():
    if len( sys.argv ) == 1:
        print( Fore.YELLOW + mensaje_ayuda )
    else:
        recorrer_argumentos()

main()